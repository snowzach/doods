// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: odrpc/rpc.proto

package odrpc

import (
	bytes "bytes"
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetDetectorsResponse struct {
	Detectors []*Detector `protobuf:"bytes,1,rep,name=detectors,proto3" json:"detectors,omitempty"`
}

func (m *GetDetectorsResponse) Reset()      { *m = GetDetectorsResponse{} }
func (*GetDetectorsResponse) ProtoMessage() {}
func (*GetDetectorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edafdb9f55df517e, []int{0}
}
func (m *GetDetectorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDetectorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDetectorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDetectorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDetectorsResponse.Merge(m, src)
}
func (m *GetDetectorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDetectorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDetectorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDetectorsResponse proto.InternalMessageInfo

func (m *GetDetectorsResponse) GetDetectors() []*Detector {
	if m != nil {
		return m.Detectors
	}
	return nil
}

type Detector struct {
	// The name for this config
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name for this config
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Model Name
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Labels
	Labels []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	// The detection width
	Width int32 `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	// The detection height
	Height int32 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	// The detection channels
	Channels int32 `protobuf:"varint,7,opt,name=channels,proto3" json:"channels,omitempty"`
}

func (m *Detector) Reset()      { *m = Detector{} }
func (*Detector) ProtoMessage() {}
func (*Detector) Descriptor() ([]byte, []int) {
	return fileDescriptor_edafdb9f55df517e, []int{1}
}
func (m *Detector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Detector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Detector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Detector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Detector.Merge(m, src)
}
func (m *Detector) XXX_Size() int {
	return m.Size()
}
func (m *Detector) XXX_DiscardUnknown() {
	xxx_messageInfo_Detector.DiscardUnknown(m)
}

var xxx_messageInfo_Detector proto.InternalMessageInfo

func (m *Detector) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Detector) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Detector) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Detector) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Detector) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Detector) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Detector) GetChannels() int32 {
	if m != nil {
		return m.Channels
	}
	return 0
}

// The Process Request
type DetectRequest struct {
	// The ID for the request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID for the request.
	DetectorName string `protobuf:"bytes,2,opt,name=detector_name,json=detectorName,proto3" json:"detector_name,omitempty"`
	// The image data
	Data Raw `protobuf:"bytes,3,opt,name=data,proto3,casttype=Raw" json:"data"`
	// What to detect
	Detect map[string]float32 `protobuf:"bytes,4,rep,name=detect,proto3" json:"detect,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// Sub regions for detection
	Regions []*DetectRegion `protobuf:"bytes,5,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (m *DetectRequest) Reset()      { *m = DetectRequest{} }
func (*DetectRequest) ProtoMessage() {}
func (*DetectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edafdb9f55df517e, []int{2}
}
func (m *DetectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectRequest.Merge(m, src)
}
func (m *DetectRequest) XXX_Size() int {
	return m.Size()
}
func (m *DetectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DetectRequest proto.InternalMessageInfo

func (m *DetectRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DetectRequest) GetDetectorName() string {
	if m != nil {
		return m.DetectorName
	}
	return ""
}

func (m *DetectRequest) GetData() Raw {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DetectRequest) GetDetect() map[string]float32 {
	if m != nil {
		return m.Detect
	}
	return nil
}

func (m *DetectRequest) GetRegions() []*DetectRegion {
	if m != nil {
		return m.Regions
	}
	return nil
}

type DetectRegion struct {
	// Coordinates
	Top    float32 `protobuf:"fixed32,1,opt,name=top,proto3" json:"top"`
	Left   float32 `protobuf:"fixed32,2,opt,name=left,proto3" json:"left"`
	Bottom float32 `protobuf:"fixed32,3,opt,name=bottom,proto3" json:"bottom"`
	Right  float32 `protobuf:"fixed32,4,opt,name=right,proto3" json:"right"`
	// What to detect
	Detect map[string]float32 `protobuf:"bytes,5,rep,name=detect,proto3" json:"detect,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (m *DetectRegion) Reset()      { *m = DetectRegion{} }
func (*DetectRegion) ProtoMessage() {}
func (*DetectRegion) Descriptor() ([]byte, []int) {
	return fileDescriptor_edafdb9f55df517e, []int{3}
}
func (m *DetectRegion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectRegion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetectRegion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetectRegion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectRegion.Merge(m, src)
}
func (m *DetectRegion) XXX_Size() int {
	return m.Size()
}
func (m *DetectRegion) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectRegion.DiscardUnknown(m)
}

var xxx_messageInfo_DetectRegion proto.InternalMessageInfo

func (m *DetectRegion) GetTop() float32 {
	if m != nil {
		return m.Top
	}
	return 0
}

func (m *DetectRegion) GetLeft() float32 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *DetectRegion) GetBottom() float32 {
	if m != nil {
		return m.Bottom
	}
	return 0
}

func (m *DetectRegion) GetRight() float32 {
	if m != nil {
		return m.Right
	}
	return 0
}

func (m *DetectRegion) GetDetect() map[string]float32 {
	if m != nil {
		return m.Detect
	}
	return nil
}

// Area for detection
type Detection struct {
	// Coordinates
	Top        float32 `protobuf:"fixed32,1,opt,name=top,proto3" json:"top"`
	Left       float32 `protobuf:"fixed32,2,opt,name=left,proto3" json:"left"`
	Bottom     float32 `protobuf:"fixed32,3,opt,name=bottom,proto3" json:"bottom"`
	Right      float32 `protobuf:"fixed32,4,opt,name=right,proto3" json:"right"`
	Label      string  `protobuf:"bytes,5,opt,name=label,proto3" json:"label"`
	Confidence float32 `protobuf:"fixed32,6,opt,name=confidence,proto3" json:"confidence"`
}

func (m *Detection) Reset()      { *m = Detection{} }
func (*Detection) ProtoMessage() {}
func (*Detection) Descriptor() ([]byte, []int) {
	return fileDescriptor_edafdb9f55df517e, []int{4}
}
func (m *Detection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Detection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Detection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Detection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Detection.Merge(m, src)
}
func (m *Detection) XXX_Size() int {
	return m.Size()
}
func (m *Detection) XXX_DiscardUnknown() {
	xxx_messageInfo_Detection.DiscardUnknown(m)
}

var xxx_messageInfo_Detection proto.InternalMessageInfo

func (m *Detection) GetTop() float32 {
	if m != nil {
		return m.Top
	}
	return 0
}

func (m *Detection) GetLeft() float32 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *Detection) GetBottom() float32 {
	if m != nil {
		return m.Bottom
	}
	return 0
}

func (m *Detection) GetRight() float32 {
	if m != nil {
		return m.Right
	}
	return 0
}

func (m *Detection) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Detection) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type DetectResponse struct {
	// The id for the response
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The detected areas
	Detections []*Detection `protobuf:"bytes,2,rep,name=detections,proto3" json:"detections,omitempty"`
	// If there was an error (streaming endpoint only)
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *DetectResponse) Reset()      { *m = DetectResponse{} }
func (*DetectResponse) ProtoMessage() {}
func (*DetectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edafdb9f55df517e, []int{5}
}
func (m *DetectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectResponse.Merge(m, src)
}
func (m *DetectResponse) XXX_Size() int {
	return m.Size()
}
func (m *DetectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DetectResponse proto.InternalMessageInfo

func (m *DetectResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DetectResponse) GetDetections() []*Detection {
	if m != nil {
		return m.Detections
	}
	return nil
}

func (m *DetectResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*GetDetectorsResponse)(nil), "odrpc.GetDetectorsResponse")
	proto.RegisterType((*Detector)(nil), "odrpc.Detector")
	proto.RegisterType((*DetectRequest)(nil), "odrpc.DetectRequest")
	proto.RegisterMapType((map[string]float32)(nil), "odrpc.DetectRequest.DetectEntry")
	proto.RegisterType((*DetectRegion)(nil), "odrpc.DetectRegion")
	proto.RegisterMapType((map[string]float32)(nil), "odrpc.DetectRegion.DetectEntry")
	proto.RegisterType((*Detection)(nil), "odrpc.Detection")
	proto.RegisterType((*DetectResponse)(nil), "odrpc.DetectResponse")
}

func init() { proto.RegisterFile("odrpc/rpc.proto", fileDescriptor_edafdb9f55df517e) }

var fileDescriptor_edafdb9f55df517e = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xbf, 0x6f, 0xdb, 0x46,
	0x14, 0xd6, 0x51, 0xbf, 0xac, 0x67, 0xf9, 0x07, 0xae, 0xae, 0xcb, 0xca, 0x06, 0x29, 0xd0, 0x8b,
	0x60, 0xc0, 0xa4, 0xe1, 0x0e, 0x75, 0xbd, 0x55, 0xa8, 0xd1, 0xad, 0xc3, 0x15, 0x45, 0x01, 0x2f,
	0x05, 0x45, 0x9e, 0x29, 0xa2, 0x12, 0x8f, 0x25, 0x4f, 0x35, 0x94, 0x20, 0x80, 0x91, 0x39, 0x01,
	0x02, 0xe4, 0x9f, 0x08, 0xf2, 0x97, 0x64, 0x34, 0x90, 0xc5, 0xc8, 0x20, 0xc4, 0x72, 0x86, 0x40,
	0x93, 0xe7, 0x4c, 0xc1, 0xfd, 0xa0, 0x2d, 0x1b, 0x5a, 0x82, 0x0c, 0x59, 0x78, 0xf7, 0x7d, 0xf7,
	0xdd, 0xbb, 0x7b, 0x1f, 0xef, 0x3d, 0x58, 0x63, 0x61, 0x96, 0x06, 0x5e, 0x96, 0x06, 0x6e, 0x9a,
	0x31, 0xce, 0x70, 0x55, 0x12, 0xad, 0xed, 0x88, 0xb1, 0x68, 0x40, 0x3d, 0x3f, 0x8d, 0x3d, 0x3f,
	0x49, 0x18, 0xf7, 0x79, 0xcc, 0x92, 0x5c, 0x89, 0x5a, 0x5b, 0x7a, 0x55, 0xa2, 0xde, 0xe8, 0xd4,
	0xa3, 0xc3, 0x94, 0x8f, 0xf5, 0xe2, 0x5e, 0x14, 0xf3, 0xfe, 0xa8, 0xe7, 0x06, 0x6c, 0xe8, 0x45,
	0x2c, 0x62, 0x77, 0x2a, 0x81, 0x24, 0x90, 0x33, 0x25, 0x77, 0x8e, 0x61, 0xe3, 0x77, 0xca, 0x7f,
	0xa3, 0x9c, 0x06, 0x9c, 0x65, 0x39, 0xa1, 0x79, 0xca, 0x92, 0x9c, 0xe2, 0x3d, 0x68, 0x84, 0x05,
	0x69, 0xa2, 0x76, 0xb9, 0xb3, 0x7c, 0xb0, 0xe6, 0xca, 0xcb, 0xb9, 0x85, 0x98, 0xdc, 0x29, 0x9c,
	0xd7, 0x08, 0x96, 0x0a, 0x1e, 0x63, 0xa8, 0x24, 0xfe, 0x90, 0x9a, 0xa8, 0x8d, 0x3a, 0x0d, 0x22,
	0xe7, 0x82, 0xe3, 0xe3, 0x94, 0x9a, 0x86, 0xe2, 0xc4, 0x1c, 0x6f, 0x40, 0x75, 0xc8, 0x42, 0x3a,
	0x30, 0xcb, 0x92, 0x54, 0x00, 0x6f, 0x42, 0x6d, 0xe0, 0xf7, 0xe8, 0x20, 0x37, 0x2b, 0xed, 0x72,
	0xa7, 0x41, 0x34, 0x12, 0xea, 0xb3, 0x38, 0xe4, 0x7d, 0xb3, 0xda, 0x46, 0x9d, 0x2a, 0x51, 0x40,
	0xa8, 0xfb, 0x34, 0x8e, 0xfa, 0xdc, 0xac, 0x49, 0x5a, 0x23, 0xdc, 0x82, 0xa5, 0xa0, 0xef, 0x27,
	0x89, 0x88, 0x53, 0x97, 0x2b, 0xb7, 0xd8, 0x79, 0x6e, 0xc0, 0x8a, 0xba, 0x2c, 0xa1, 0xff, 0x8d,
	0x68, 0xce, 0xf1, 0x2a, 0x18, 0x71, 0xa8, 0xef, 0x6b, 0xc4, 0x21, 0xde, 0x81, 0x95, 0x22, 0xb7,
	0x7f, 0x64, 0x2a, 0xea, 0xda, 0xcd, 0x82, 0xfc, 0x43, 0xa4, 0xb4, 0x03, 0x95, 0xd0, 0xe7, 0xbe,
	0xbc, 0x7d, 0xb3, 0xbb, 0x36, 0x9b, 0xd8, 0x12, 0x7f, 0x9a, 0xd8, 0x65, 0xe2, 0x9f, 0x11, 0x09,
	0xf0, 0x21, 0xd4, 0xd4, 0x26, 0x99, 0xcd, 0xf2, 0x41, 0xfb, 0x9e, 0x89, 0xfa, 0x7c, 0x8d, 0x8e,
	0x13, 0x9e, 0x8d, 0x89, 0xd6, 0xe3, 0x3d, 0xa8, 0x67, 0x34, 0x12, 0xbf, 0xdd, 0xac, 0xca, 0xad,
	0xdf, 0x3d, 0xd8, 0x2a, 0xd6, 0x48, 0xa1, 0x69, 0xfd, 0x02, 0xcb, 0x73, 0x51, 0xf0, 0x3a, 0x94,
	0xff, 0xa5, 0x63, 0x9d, 0x92, 0x98, 0x0a, 0xff, 0xfe, 0xf7, 0x07, 0x23, 0x95, 0x8b, 0x41, 0x14,
	0x38, 0x32, 0x0e, 0x91, 0x73, 0x6e, 0x40, 0x73, 0x3e, 0x28, 0xfe, 0x11, 0xca, 0x9c, 0xa5, 0x72,
	0xb3, 0xd1, 0xad, 0xcf, 0x26, 0xb6, 0x80, 0x44, 0x7c, 0xf0, 0x36, 0x54, 0x06, 0xf4, 0x94, 0xab,
	0x20, 0xdd, 0x25, 0x91, 0xb4, 0xc0, 0x44, 0x7e, 0xb1, 0x03, 0xb5, 0x1e, 0xe3, 0x9c, 0x0d, 0xa5,
	0x29, 0x46, 0x17, 0x66, 0x13, 0x5b, 0x33, 0x44, 0x8f, 0xd8, 0x86, 0x6a, 0x26, 0x7f, 0x58, 0x45,
	0x4a, 0x1a, 0xb3, 0x89, 0xad, 0x08, 0xa2, 0x06, 0xfc, 0xf3, 0xad, 0x65, 0x2a, 0x6f, 0x7b, 0x41,
	0xde, 0x8b, 0x1c, 0xfb, 0x1a, 0x0b, 0xde, 0x21, 0x68, 0xa8, 0xbd, 0xdf, 0x3e, 0x7f, 0x1b, 0xaa,
	0xf2, 0xc9, 0xcb, 0x87, 0xde, 0x50, 0x02, 0x49, 0x10, 0x35, 0x60, 0x17, 0x20, 0x60, 0xc9, 0x69,
	0x1c, 0xd2, 0x24, 0xa0, 0xf2, 0xdd, 0x1b, 0xdd, 0xd5, 0xd9, 0xc4, 0x9e, 0x63, 0xc9, 0xdc, 0xdc,
	0xe9, 0xc3, 0x6a, 0xe1, 0x9d, 0xae, 0xee, 0x87, 0xef, 0x7d, 0x1f, 0x20, 0x2c, 0xb2, 0xcf, 0x4d,
	0x43, 0xda, 0xbe, 0x7e, 0xcf, 0x76, 0xf1, 0xd6, 0xe6, 0x34, 0xc2, 0x4a, 0x9a, 0x65, 0x2c, 0x2b,
	0x6a, 0x57, 0x82, 0x83, 0x67, 0x06, 0xa8, 0x0e, 0x86, 0xff, 0x86, 0xe6, 0x7c, 0x5f, 0xc1, 0x9b,
	0xae, 0x6a, 0x5a, 0x6e, 0xd1, 0x8e, 0xdc, 0x63, 0xd1, 0xb4, 0x5a, 0x5b, 0xfa, 0x94, 0x45, 0x4d,
	0xc8, 0xc1, 0x4f, 0xdf, 0x7e, 0x78, 0x69, 0x34, 0x31, 0x78, 0xb7, 0x9d, 0x06, 0x47, 0x50, 0x53,
	0x42, 0xbc, 0xb1, 0xa8, 0x94, 0x5a, 0xdf, 0x3f, 0x60, 0x75, 0xa8, 0x7d, 0x19, 0x6a, 0xd7, 0xa9,
	0xeb, 0x50, 0x47, 0x68, 0xf7, 0x64, 0xdb, 0xf9, 0x41, 0x23, 0xef, 0xf1, 0xbd, 0x72, 0x7f, 0x72,
	0x84, 0x76, 0xf1, 0xaf, 0x45, 0x51, 0xfc, 0xc9, 0x33, 0xea, 0x0f, 0xbf, 0xec, 0xb8, 0x52, 0x07,
	0xed, 0xa3, 0xee, 0x5f, 0x17, 0x57, 0x56, 0xe9, 0xf2, 0xca, 0x2a, 0xdd, 0x5c, 0x59, 0xe8, 0x7c,
	0x6a, 0xa1, 0x57, 0x53, 0x0b, 0xbd, 0x99, 0x5a, 0xe8, 0x62, 0x6a, 0xa1, 0xf7, 0x53, 0x0b, 0x7d,
	0x9c, 0x5a, 0xa5, 0x9b, 0xa9, 0x85, 0x5e, 0x5c, 0x5b, 0xa5, 0x8b, 0x6b, 0xab, 0x74, 0x79, 0x6d,
	0x95, 0x4e, 0xec, 0xb9, 0x0e, 0x9e, 0x27, 0xec, 0xec, 0x91, 0x1f, 0xf4, 0xbd, 0x90, 0xb1, 0x30,
	0xf7, 0xe4, 0x59, 0xbd, 0x9a, 0xf4, 0xf0, 0xa7, 0xcf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x51, 0x05,
	0xad, 0x44, 0x3e, 0x06, 0x00, 0x00,
}

func (this *GetDetectorsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDetectorsResponse)
	if !ok {
		that2, ok := that.(GetDetectorsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Detectors) != len(that1.Detectors) {
		return false
	}
	for i := range this.Detectors {
		if !this.Detectors[i].Equal(that1.Detectors[i]) {
			return false
		}
	}
	return true
}
func (this *Detector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Detector)
	if !ok {
		that2, ok := that.(Detector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Model != that1.Model {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Channels != that1.Channels {
		return false
	}
	return true
}
func (this *DetectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectRequest)
	if !ok {
		that2, ok := that.(DetectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.DetectorName != that1.DetectorName {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if len(this.Detect) != len(that1.Detect) {
		return false
	}
	for i := range this.Detect {
		if this.Detect[i] != that1.Detect[i] {
			return false
		}
	}
	if len(this.Regions) != len(that1.Regions) {
		return false
	}
	for i := range this.Regions {
		if !this.Regions[i].Equal(that1.Regions[i]) {
			return false
		}
	}
	return true
}
func (this *DetectRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectRegion)
	if !ok {
		that2, ok := that.(DetectRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Top != that1.Top {
		return false
	}
	if this.Left != that1.Left {
		return false
	}
	if this.Bottom != that1.Bottom {
		return false
	}
	if this.Right != that1.Right {
		return false
	}
	if len(this.Detect) != len(that1.Detect) {
		return false
	}
	for i := range this.Detect {
		if this.Detect[i] != that1.Detect[i] {
			return false
		}
	}
	return true
}
func (this *Detection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Detection)
	if !ok {
		that2, ok := that.(Detection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Top != that1.Top {
		return false
	}
	if this.Left != that1.Left {
		return false
	}
	if this.Bottom != that1.Bottom {
		return false
	}
	if this.Right != that1.Right {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Confidence != that1.Confidence {
		return false
	}
	return true
}
func (this *DetectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectResponse)
	if !ok {
		that2, ok := that.(DetectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Detections) != len(that1.Detections) {
		return false
	}
	for i := range this.Detections {
		if !this.Detections[i].Equal(that1.Detections[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *GetDetectorsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&odrpc.GetDetectorsResponse{")
	if this.Detectors != nil {
		s = append(s, "Detectors: "+fmt.Sprintf("%#v", this.Detectors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Detector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&odrpc.Detector{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Channels: "+fmt.Sprintf("%#v", this.Channels)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&odrpc.DetectRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "DetectorName: "+fmt.Sprintf("%#v", this.DetectorName)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	keysForDetect := make([]string, 0, len(this.Detect))
	for k, _ := range this.Detect {
		keysForDetect = append(keysForDetect, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDetect)
	mapStringForDetect := "map[string]float32{"
	for _, k := range keysForDetect {
		mapStringForDetect += fmt.Sprintf("%#v: %#v,", k, this.Detect[k])
	}
	mapStringForDetect += "}"
	if this.Detect != nil {
		s = append(s, "Detect: "+mapStringForDetect+",\n")
	}
	if this.Regions != nil {
		s = append(s, "Regions: "+fmt.Sprintf("%#v", this.Regions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&odrpc.DetectRegion{")
	s = append(s, "Top: "+fmt.Sprintf("%#v", this.Top)+",\n")
	s = append(s, "Left: "+fmt.Sprintf("%#v", this.Left)+",\n")
	s = append(s, "Bottom: "+fmt.Sprintf("%#v", this.Bottom)+",\n")
	s = append(s, "Right: "+fmt.Sprintf("%#v", this.Right)+",\n")
	keysForDetect := make([]string, 0, len(this.Detect))
	for k, _ := range this.Detect {
		keysForDetect = append(keysForDetect, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDetect)
	mapStringForDetect := "map[string]float32{"
	for _, k := range keysForDetect {
		mapStringForDetect += fmt.Sprintf("%#v: %#v,", k, this.Detect[k])
	}
	mapStringForDetect += "}"
	if this.Detect != nil {
		s = append(s, "Detect: "+mapStringForDetect+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Detection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&odrpc.Detection{")
	s = append(s, "Top: "+fmt.Sprintf("%#v", this.Top)+",\n")
	s = append(s, "Left: "+fmt.Sprintf("%#v", this.Left)+",\n")
	s = append(s, "Bottom: "+fmt.Sprintf("%#v", this.Bottom)+",\n")
	s = append(s, "Right: "+fmt.Sprintf("%#v", this.Right)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Confidence: "+fmt.Sprintf("%#v", this.Confidence)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&odrpc.DetectResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Detections != nil {
		s = append(s, "Detections: "+fmt.Sprintf("%#v", this.Detections)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OdrpcClient is the client API for Odrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OdrpcClient interface {
	// Get Config
	GetDetectors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetDetectorsResponse, error)
	// Process an request
	Detect(ctx context.Context, in *DetectRequest, opts ...grpc.CallOption) (*DetectResponse, error)
	// Process stream requests
	DetectStream(ctx context.Context, opts ...grpc.CallOption) (Odrpc_DetectStreamClient, error)
}

type odrpcClient struct {
	cc *grpc.ClientConn
}

func NewOdrpcClient(cc *grpc.ClientConn) OdrpcClient {
	return &odrpcClient{cc}
}

func (c *odrpcClient) GetDetectors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetDetectorsResponse, error) {
	out := new(GetDetectorsResponse)
	err := c.cc.Invoke(ctx, "/odrpc.odrpc/GetDetectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odrpcClient) Detect(ctx context.Context, in *DetectRequest, opts ...grpc.CallOption) (*DetectResponse, error) {
	out := new(DetectResponse)
	err := c.cc.Invoke(ctx, "/odrpc.odrpc/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odrpcClient) DetectStream(ctx context.Context, opts ...grpc.CallOption) (Odrpc_DetectStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Odrpc_serviceDesc.Streams[0], "/odrpc.odrpc/DetectStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &odrpcDetectStreamClient{stream}
	return x, nil
}

type Odrpc_DetectStreamClient interface {
	Send(*DetectRequest) error
	Recv() (*DetectResponse, error)
	grpc.ClientStream
}

type odrpcDetectStreamClient struct {
	grpc.ClientStream
}

func (x *odrpcDetectStreamClient) Send(m *DetectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *odrpcDetectStreamClient) Recv() (*DetectResponse, error) {
	m := new(DetectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OdrpcServer is the server API for Odrpc service.
type OdrpcServer interface {
	// Get Config
	GetDetectors(context.Context, *empty.Empty) (*GetDetectorsResponse, error)
	// Process an request
	Detect(context.Context, *DetectRequest) (*DetectResponse, error)
	// Process stream requests
	DetectStream(Odrpc_DetectStreamServer) error
}

// UnimplementedOdrpcServer can be embedded to have forward compatible implementations.
type UnimplementedOdrpcServer struct {
}

func (*UnimplementedOdrpcServer) GetDetectors(ctx context.Context, req *empty.Empty) (*GetDetectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetectors not implemented")
}
func (*UnimplementedOdrpcServer) Detect(ctx context.Context, req *DetectRequest) (*DetectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}
func (*UnimplementedOdrpcServer) DetectStream(srv Odrpc_DetectStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DetectStream not implemented")
}

func RegisterOdrpcServer(s *grpc.Server, srv OdrpcServer) {
	s.RegisterService(&_Odrpc_serviceDesc, srv)
}

func _Odrpc_GetDetectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdrpcServer).GetDetectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odrpc.odrpc/GetDetectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdrpcServer).GetDetectors(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Odrpc_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdrpcServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odrpc.odrpc/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdrpcServer).Detect(ctx, req.(*DetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Odrpc_DetectStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OdrpcServer).DetectStream(&odrpcDetectStreamServer{stream})
}

type Odrpc_DetectStreamServer interface {
	Send(*DetectResponse) error
	Recv() (*DetectRequest, error)
	grpc.ServerStream
}

type odrpcDetectStreamServer struct {
	grpc.ServerStream
}

func (x *odrpcDetectStreamServer) Send(m *DetectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *odrpcDetectStreamServer) Recv() (*DetectRequest, error) {
	m := new(DetectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Odrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "odrpc.odrpc",
	HandlerType: (*OdrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetectors",
			Handler:    _Odrpc_GetDetectors_Handler,
		},
		{
			MethodName: "Detect",
			Handler:    _Odrpc_Detect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DetectStream",
			Handler:       _Odrpc_DetectStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "odrpc/rpc.proto",
}

func (m *GetDetectorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDetectorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDetectorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Detectors) > 0 {
		for iNdEx := len(m.Detectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Detectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Detector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Detector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Detector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channels != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Channels))
		i--
		dAtA[i] = 0x38
	}
	if m.Height != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x30
	}
	if m.Width != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Labels[iNdEx])
			copy(dAtA[i:], m.Labels[iNdEx])
			i = encodeVarintRpc(dAtA, i, uint64(len(m.Labels[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Regions) > 0 {
		for iNdEx := len(m.Regions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Regions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Detect) > 0 {
		for k := range m.Detect {
			v := m.Detect[k]
			baseI := i
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(v))))
			i--
			dAtA[i] = 0x15
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRpc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DetectorName) > 0 {
		i -= len(m.DetectorName)
		copy(dAtA[i:], m.DetectorName)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.DetectorName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetectRegion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectRegion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectRegion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Detect) > 0 {
		for k := range m.Detect {
			v := m.Detect[k]
			baseI := i
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(v))))
			i--
			dAtA[i] = 0x15
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRpc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Right != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Right))))
		i--
		dAtA[i] = 0x25
	}
	if m.Bottom != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Bottom))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Left != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Left))))
		i--
		dAtA[i] = 0x15
	}
	if m.Top != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Top))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *Detection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Detection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Detection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confidence != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Confidence))))
		i--
		dAtA[i] = 0x35
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Right != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Right))))
		i--
		dAtA[i] = 0x25
	}
	if m.Bottom != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Bottom))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Left != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Left))))
		i--
		dAtA[i] = 0x15
	}
	if m.Top != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Top))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *DetectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Detections) > 0 {
		for iNdEx := len(m.Detections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Detections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDetectorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Detectors) > 0 {
		for _, e := range m.Detectors {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *Detector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			l = len(s)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	if m.Width != 0 {
		n += 1 + sovRpc(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovRpc(uint64(m.Height))
	}
	if m.Channels != 0 {
		n += 1 + sovRpc(uint64(m.Channels))
	}
	return n
}

func (m *DetectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.DetectorName)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if len(m.Detect) > 0 {
		for k, v := range m.Detect {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRpc(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovRpc(uint64(mapEntrySize))
		}
	}
	if len(m.Regions) > 0 {
		for _, e := range m.Regions {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *DetectRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Top != 0 {
		n += 5
	}
	if m.Left != 0 {
		n += 5
	}
	if m.Bottom != 0 {
		n += 5
	}
	if m.Right != 0 {
		n += 5
	}
	if len(m.Detect) > 0 {
		for k, v := range m.Detect {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRpc(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovRpc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Detection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Top != 0 {
		n += 5
	}
	if m.Left != 0 {
		n += 5
	}
	if m.Bottom != 0 {
		n += 5
	}
	if m.Right != 0 {
		n += 5
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Confidence != 0 {
		n += 5
	}
	return n
}

func (m *DetectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if len(m.Detections) > 0 {
		for _, e := range m.Detections {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetDetectorsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDetectors := "[]*Detector{"
	for _, f := range this.Detectors {
		repeatedStringForDetectors += strings.Replace(f.String(), "Detector", "Detector", 1) + ","
	}
	repeatedStringForDetectors += "}"
	s := strings.Join([]string{`&GetDetectorsResponse{`,
		`Detectors:` + repeatedStringForDetectors + `,`,
		`}`,
	}, "")
	return s
}
func (this *Detector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Detector{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Model:` + fmt.Sprintf("%v", this.Model) + `,`,
		`Labels:` + fmt.Sprintf("%v", this.Labels) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Channels:` + fmt.Sprintf("%v", this.Channels) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRegions := "[]*DetectRegion{"
	for _, f := range this.Regions {
		repeatedStringForRegions += strings.Replace(f.String(), "DetectRegion", "DetectRegion", 1) + ","
	}
	repeatedStringForRegions += "}"
	keysForDetect := make([]string, 0, len(this.Detect))
	for k, _ := range this.Detect {
		keysForDetect = append(keysForDetect, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDetect)
	mapStringForDetect := "map[string]float32{"
	for _, k := range keysForDetect {
		mapStringForDetect += fmt.Sprintf("%v: %v,", k, this.Detect[k])
	}
	mapStringForDetect += "}"
	s := strings.Join([]string{`&DetectRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`DetectorName:` + fmt.Sprintf("%v", this.DetectorName) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Detect:` + mapStringForDetect + `,`,
		`Regions:` + repeatedStringForRegions + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectRegion) String() string {
	if this == nil {
		return "nil"
	}
	keysForDetect := make([]string, 0, len(this.Detect))
	for k, _ := range this.Detect {
		keysForDetect = append(keysForDetect, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDetect)
	mapStringForDetect := "map[string]float32{"
	for _, k := range keysForDetect {
		mapStringForDetect += fmt.Sprintf("%v: %v,", k, this.Detect[k])
	}
	mapStringForDetect += "}"
	s := strings.Join([]string{`&DetectRegion{`,
		`Top:` + fmt.Sprintf("%v", this.Top) + `,`,
		`Left:` + fmt.Sprintf("%v", this.Left) + `,`,
		`Bottom:` + fmt.Sprintf("%v", this.Bottom) + `,`,
		`Right:` + fmt.Sprintf("%v", this.Right) + `,`,
		`Detect:` + mapStringForDetect + `,`,
		`}`,
	}, "")
	return s
}
func (this *Detection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Detection{`,
		`Top:` + fmt.Sprintf("%v", this.Top) + `,`,
		`Left:` + fmt.Sprintf("%v", this.Left) + `,`,
		`Bottom:` + fmt.Sprintf("%v", this.Bottom) + `,`,
		`Right:` + fmt.Sprintf("%v", this.Right) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Confidence:` + fmt.Sprintf("%v", this.Confidence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDetections := "[]*Detection{"
	for _, f := range this.Detections {
		repeatedStringForDetections += strings.Replace(f.String(), "Detection", "Detection", 1) + ","
	}
	repeatedStringForDetections += "}"
	s := strings.Join([]string{`&DetectResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Detections:` + repeatedStringForDetections + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetDetectorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDetectorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDetectorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detectors = append(m.Detectors, &Detector{})
			if err := m.Detectors[len(m.Detectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Detector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Detector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Detector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			m.Channels = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channels |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetectorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detect == nil {
				m.Detect = make(map[string]float32)
			}
			var mapkey string
			var mapvalue float32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRpc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRpc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					mapvalue = math.Float32frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Detect[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regions = append(m.Regions, &DetectRegion{})
			if err := m.Regions[len(m.Regions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetectRegion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectRegion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectRegion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Top = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Left = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bottom", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Bottom = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Right = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detect == nil {
				m.Detect = make(map[string]float32)
			}
			var mapkey string
			var mapvalue float32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRpc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRpc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					mapvalue = math.Float32frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Detect[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Detection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Detection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Detection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Top = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Left = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bottom", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Bottom = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Right = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confidence", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Confidence = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detections = append(m.Detections, &Detection{})
			if err := m.Detections[len(m.Detections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)
